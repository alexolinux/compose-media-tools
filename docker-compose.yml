services:
  #https://github.com/pi-hole/docker-pi-hole
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    restart: unless-stopped
    networks:
      - xlocal
    ports:
      # DNS Ports
      - "53:53/tcp"
      - "53:53/udp"
      # Default HTTP Port
      - "90:80/tcp"
      # Default HTTPs Port. FTL will generate a self-signed certificate
      - "9443:443/tcp"
      # Uncomment the line below if you are using Pi-hole as your DHCP server
      #- "67:67/udp"
      # Uncomment the line below if you are using Pi-hole as your NTP server
      #- "123:123/udp"
    environment:
      # Set the appropriate timezone for your location (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
      TZ: ${TZ}
      # Set a password to access the web interface. Not setting one will result in a random password being assigned
      FTLCONF_webserver_api_password: ${PIHOLE_PASSWORD}
      # If using Docker's default `bridge` network setting the dns listening mode should be set to 'all'
      FTLCONF_dns_listeningMode: 'all'
    volumes:
      # For persisting Pi-hole's databases and common configuration file >>: - './etc-pihole:/etc/pihole'
      - '${CONFIG}/pihole:/etc/pihole'
      # Uncomment the below if you have custom dnsmasq config files that you want to persist. Not needed for most starting fresh with Pi-hole v6.
      #If you're upgrading from v5 you and have used this directory before, you should keep it enabled for the first v6 container start to allow for a complete migration.
      #It can be removed afterwards. Needs environment variable FTLCONF_misc_etc_dnsmasq_d: 'true'
      #- './etc-dnsmasq.d:/etc/dnsmasq.d'
    cap_add:
      # See https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
      # Required if you are using Pi-hole as your DHCP server, else not needed
      - NET_ADMIN
      # Required if you are using Pi-hole as your NTP client to be able to set the host's system time
      - SYS_TIME
      # Optional, if Pi-hole should get some more processing time
      - SYS_NICE
  proxymanager:
    image: jc21/nginx-proxy-manager:${PROXYMANAGER_VERSION}
    container_name: proxymanager
    restart: unless-stopped
    networks:
      - xlocal
    ports:
      - "81:81"
      - "88:80"
      - "8443:443"
    volumes:
      - nginx_data:/data
      - '${CONFIG}/letsencrypt:/etc/letsencrypt'
  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    container_name: duckdns
    restart: unless-stopped
    networks:
      - xlocal
    ports:
      - ${DUCKDNS_PORT}:80
    environment:
      - TZ=${TZ}
      - PUID=${HOST_UID}
      - PGID=${HOST_GID}
      - SUBDOMAINS=${SUBDOMAINS}
      - TOKEN=${DUCKDNS_API}
      - UPDATE_IP=ipv4
      - LOG_FILE=false
    volumes:
      - '${CONFIG}/duckdns:/config'
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: unless-stopped
    networks:
      - xlocal
    ports:
      - "8000:8000"
      - "9000:9000"
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
  jellyfin:
    image: jellyfin/jellyfin:${JELLYFIN_VERSION}
    container_name: jellyfin
    restart: unless-stopped
    networks:
      - xlocal
    ports:
      - "8096:8096"
      - "8920:8920"
    volumes:
      - '${CONFIG}/jellyfin:/config'
      - ${HOME}/.cache/jellyfin:/cache
      - type: bind
        source: ${DATA_MEDIA}
        target: /media
        bind:
          propagation: shared
    environment:
      - TZ=${TZ}
      - PUID=${HOST_UID}
      - PGID=${HOST_GID}
  owncloud:
    image: owncloud/server:${OWNCLOUD_VERSION}
    container_name: owncloud
    restart: unless-stopped
    networks:
      - xlocal
    ports:
      - ${OWNCLOUD_PORT}:8080
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy

    environment:
      - OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS}
      - OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN}
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_MYSQL_UTF8MB4=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_ADMIN_USERNAME=${ADMIN_USERNAME}
      - OWNCLOUD_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OWNCLOUD_DB_NAME=${OWNCLOUD_DB_NAME}
      - OWNCLOUD_DB_USERNAME=${OWNCLOUD_DB_USERNAME}
      - OWNCLOUD_DB_PASSWORD=${OWNCLOUD_DB_PASSWORD}
      - OWNCLOUD_DB_HOST=${OWNCLOUD_DB_HOST}
      - OWNCLOUD_REDIS_HOST=${OWNCLOUD_REDIS_HOST}
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - owncloud:/mnt/data
      #https://doc.owncloud.com/server/next/admin_manual/configuration/files/external_storage/local.html
      - type: bind
        source: ${DATA_CLOUD}
        target: /mnt/files
        bind:
          propagation: shared
  mariadb:
    image: mariadb:${MARIADB_VERSION}
    container_name: mariadb
    restart: unless-stopped
    networks:
      - xlocal
    environment:
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MARIADB_AUTO_UPGRADE=1
    command: ["--max-allowed-packet=128M", "--innodb-log-file-size=64M"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u", "root", "--password=owncloud"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mysql:/var/lib/mysql
  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    restart: unless-stopped
    networks:
      - xlocal
    command: ["--databases", "1"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis:/data

# Network
networks:
  xlocal:
    driver: bridge

# Volumes
volumes:
  nginx_data:
    external: true
  portainer_data:
    external: true
  mysql:
    driver: local
  redis:
    driver: local
  owncloud:
    driver: local

